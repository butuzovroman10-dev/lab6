#include "JordanGaussSolver.h"
#include <iostream>
#include <cassert>

using namespace std;

void testBasicSystem() {
    cout << "–¢–µ—Å—Ç 1: –ë–∞–∑–æ–≤–∞—è —Å–∏—Å—Ç–µ–º–∞ 3x3" << endl;
    
    vector<vector<double>> matrix = {
        {4, -1, 3, 12},
        {2, 2, -1, 4},
        {1, 1, 1, 6}
    };
    
    auto result = JordanGaussSolver::solve(matrix);
    assert(result.success);
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å –¥–æ–ø—É—Å—Ç–∏–º–æ–π –ø–æ–≥—Ä–µ—à–Ω–æ—Å—Ç—å—é
    double epsilon = 1e-6;
    assert(abs(result.solution[0] - 22.0/15.0) < epsilon);
    assert(abs(result.solution[1] - 28.0/15.0) < epsilon);
    assert(abs(result.solution[2] - 8.0/3.0) < epsilon);
    
    cout << "‚úÖ –¢–µ—Å—Ç –ø—Ä–æ–π–¥–µ–Ω" << endl;
}

void testValidation() {
    cout << "–¢–µ—Å—Ç 2: –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –º–∞—Ç—Ä–∏—Ü—ã" << endl;
    
    // –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è –º–∞—Ç—Ä–∏—Ü–∞
    vector<vector<double>> invalidMatrix = {
        {1, 2, 3},
        {4, 5}
    };
    
    assert(!JordanGaussSolver::validateMatrix(invalidMatrix));
    cout << "‚úÖ –¢–µ—Å—Ç –ø—Ä–æ–π–¥–µ–Ω" << endl;
}

int main() {
    cout << "–ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤..." << endl << endl;
    
    testBasicSystem();
    testValidation();
    
    cout << endl << "–í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–π–¥–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ! üéâ" << endl;
    return 0;
}